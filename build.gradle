apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://repo.akka.io/maven"
    }
}

def versions = [
        ScalaBinary: "2.13",
        AkkaVersion: "2.9.0",
        LogBackVersion: "1.2.3",
        JunitVersion: "4.13.1"
]

dependencies {
    implementation "com.typesafe.akka:akka-bom_${versions.ScalaBinary}:${versions.AkkaVersion}"
    implementation "com.typesafe.akka:akka-actor-typed_${versions.ScalaBinary}:${versions.AkkaVersion}"

    testImplementation "com.typesafe.akka:akka-actor-testkit-typed_${versions.ScalaBinary}:${versions.AkkaVersion}"
    testImplementation "junit:junit:${versions.JunitVersion}"
    implementation "ch.qos.logback:logback-classic:${versions.LogBackVersion}"
}

compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
}

// Old settings changed for deprecated warning
// mainClassName = "it.unitn.ds1.Broadcaster"
application {
    mainClass = "it.unitn.ds1.Broadcaster"
}
 

run {
    standardInput = System.in
}

tasks.named('test', Test) {
    useJUnit()

    maxHeapSize = '1G'

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
